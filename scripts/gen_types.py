#!/usr/bin/env python3

import argparse
import re

HEADER = \
"""\
/**
 * This file is **autogenerated** by Python. Any manual changes to it will be
 * OVERWRITTEN!
 */

"""

LINE_FORMAT = "#define {0}{1}\n"

if __name__ == '__main__':
    # Read arguments
    parser = argparse.ArgumentParser()

    parser.add_argument("--src_file", help="Source file to parse", required=True)
    parser.add_argument("--tar_file", help="Target file to write parsed enum to",
                        required=True)
    parser.add_argument("--pattern", help="Pattern of elements to match",
                        default=r"([A-Z1-9_]+TYPE_[A-Z1-9_]+)[^A-Z]+")
    parser.add_argument("--add_translation", action="store_true",
                        help="Add array to translate numbers to names.")
    parser.add_argument("--array_name", help="Name of the translation array")
    parser.add_argument("--strip_prefix", help="Prefix to strip from matches",
                        default="")

    args = parser.parse_args()

    src_file        = args.src_file
    tar_file        = args.tar_file
    pattern         = args.pattern
    add_translation = args.add_translation
    array_name      = args.array_name
    strip_prefix    = args.strip_prefix

    if add_translation and array_name = None:
        print("ERROR: --array_name must be specified with --add_translation")
        exit(1)

    matches = []
    with open(src_file, "r") as src_fp:
        regex   = re.compile(pattern)
        matches = regex.findall(src_fp.read())

    line_len = max([len(match) for match in matches]) + 1

    with open(tar_file, "w+") as tar_fp:
        tar_fp.write(HEADER)

        for idx, match in enumerate(matches):
            tar_fp.write(LINE_FORMAT.format(match.ljust(line_len), idx))

        if add_translation:
            tar_fp.write("\nchar *{array_name}[] = {\n")

            for match in matches[:-1]:
                name = match.replace(strip_prefix, "").lower()
                tar_fp.write("    \"{name}\",")

            tar_fp.write("    \"{matches[-1]}\"\n};")
