BENCHED_ROOT_DIR	= ../code_optimized/standard_optimizations
SRC_BENCHED			= $(BENCHED_ROOT_DIR)/src
IDIR_BENCHED		= $(BENCHED_ROOT_DIR)/include

# Add include sources to CC flags
CFLAGS += -I$(IDIR_BENCHED) -I$(IDIR)

# Main target, building all benchmarks
all: compile-runtime-benchmark compile-runtime-benchmark-curve1174 compile-gmp-benchmark compile-memcpy-benchmark

# Stats can only be collected for our BigInt library
.PHONY: run-all
ifeq ($(COLLECT_STATS),)
run-all: run-runtime-benchmark run-runtime-benchmark-curve1174 run-gmp-benchmark run-memcpy-benchmark
else
run-all: run-runtime-benchmark
endif

.PHONY: print-compile-msg
print-compile-msg:
ifeq ($(BENCHED_ROOT_DIR),)
	$(error Unsupported version $(VERSION) (check Makefile comments))
endif
	@echo "\n------------------------------------------------------------------------"
	@echo "Compile timing for using $(BENCHED_ROOT_DIR)"
	@echo "------------------------------------------------------------------------\n\n"


# Fresh build
.PHONY: rebuild
rebuild: clean all

.PHONY: gen-bench-types
gen-bench-types:
	${ROOT_SCRIPTS_DIR}/gen_types.py \
		--src_file ${SDIR}/runtime_benchmark_curve1174.c  ${SDIR}/runtime_benchmark.c \
		--dest_file ${IDIR}/benchmark_types.h

.PHONY: gen-bigint-types
gen-bigint-types:
	${ROOT_SCRIPTS_DIR}/gen_types.py \
		--src_files ${SRC_BENCHED}/bigint_curve1174.c ${SRC_BENCHED}/bigint.c \
		--dest_file ${IDIR_BENCHED}/bigint_types.h \
		--add_translation \
		--array_name "big_int_type_names" \
		--strip_prefix "BIGINT_TYPE_"


################################################################################
#							Runtime Benchmarks								   #
################################################################################

RUNTIME_SUB_PATH = V$(VERSION)/$(LOG_SUBDIRS)

# Specify the C files constituting the test
_RUNTIME_SRC	= benchmark_helpers.c runtime_benchmark.c
RUNTIME_SRC		= $(patsubst %,$(SDIR)/%,$(_RUNTIME_SRC))

_RUNTIME_BENCHED_SRC	= bigint_curve1174.c bigint.c elligator.c
RUNTIME_BENCHED_SRC		= $(patsubst %,$(SRC_BENCHED)/%,$(_RUNTIME_BENCHED_SRC))

.PHONY: prepare-logs-runtime-benchmark
prepare-logs-runtime-benchmark:
	mkdir -p $(LOG_PATH)

.PHONY: compile-runtime-benchmark
compile-runtime-benchmark: OUT_SUB_PATH = $(RUNTIME_SUB_PATH)
compile-runtime-benchmark: LOG_PATH = $(LOG_BASE_PATH)/$(OUT_SUB_PATH)
compile-runtime-benchmark: CFLAGS += -DLOG_PATH=\"$(LOG_PATH)\"
compile-runtime-benchmark: prepare-logs-runtime-benchmark print-compile-msg gen-bigint-types gen-bench-types runtime-benchmark

.PHONY: run-runtime-benchmark
run-runtime-benchmark: OUT_SUB_PATH = $(RUNTIME_SUB_PATH)
run-runtime-benchmark: LOG_PATH = $(LOG_BASE_PATH)/$(OUT_SUB_PATH)
run-runtime-benchmark: compile-runtime-benchmark
	echo "${LOG_PATH}" > ${LATEST_LOG_PATH}
	./$(BDIR)/runtime-benchmark $(BENCHMARKS)

.PHONY: plot-runtime-benchmark
plot-runtime-benchmark: OUT_SUB_PATH = $(RUNTIME_SUB_PATH)
plot-runtime-benchmark: LOG_PATH = $(LOG_BASE_PATH)/$(OUT_SUB_PATH)
plot-runtime-benchmark: clean run-runtime-benchmark
	# Needs to be repeated to execute multiple times in same make call
	PUBLISH=$(PUBLISH) COLLECT_STATS=$(COLLECT_STATS) SETS=$(SETS) \
	REPS=$(REPS) LOGS_DIR=$(LOG_PATH) OUT_SUB_PATH=$(OUT_SUB_PATH) \
	$(SCRIPTS_DIR)/make_all_plots.sh

runtime-benchmark: $(RUNTIME_BENCHED_SRC) $(RUNTIME_SRC)
	$(CC) -o $(BDIR)/$@ $^ $(CFLAGS) $(LIBS)


################################################################################
#						Runtime Curve1174 Benchmarks						   #
################################################################################

RUNTIME_CURVE1174_SUB_PATH = V$(VERSION)/curve1174/$(LOG_SUBDIRS)

# Specify the C files constituting the test
_RUNTIME_CURVE1174_SRC	= benchmark_helpers.c runtime_benchmark_curve1174.c
RUNTIME_CURVE1174_SRC	= $(patsubst %,$(SDIR)/%,$(_RUNTIME_CURVE1174_SRC))

_RUNTIME_CURVE1174_BENCHED_SRC	= bigint.c bigint_curve1174.c
RUNTIME_CURVE1174_BENCHED_SRC	= $(patsubst %,$(SRC_BENCHED)/%,$(_RUNTIME_CURVE1174_BENCHED_SRC))

.PHONY: prepare-logs-runtime-benchmark-curve1174
prepare-logs-runtime-benchmark-curve1174:
	mkdir -p $(LOG_PATH)

.PHONY: compile-runtime-benchmark-curve1174
compile-runtime-benchmark-curve1174: OUT_SUB_PATH = $(RUNTIME_CURVE1174_SUB_PATH)
compile-runtime-benchmark-curve1174: LOG_PATH = $(LOG_BASE_PATH)/$(OUT_SUB_PATH)
compile-runtime-benchmark-curve1174: CFLAGS += -DLOG_PATH=\"$(LOG_PATH)\"
compile-runtime-benchmark-curve1174: prepare-logs-runtime-benchmark-curve1174 print-compile-msg gen-bigint-types gen-bench-types runtime-benchmark-curve1174

.PHONY: run-runtime-benchmark-curve1174
run-runtime-benchmark-curve1174: OUT_SUB_PATH = $(RUNTIME_CURVE1174_SUB_PATH)
run-runtime-benchmark-curve1174: LOG_PATH = $(LOG_BASE_PATH)/$(OUT_SUB_PATH)
run-runtime-benchmark-curve1174: compile-runtime-benchmark-curve1174
	echo "${LOG_PATH}" > ${LATEST_LOG_PATH}
	./$(BDIR)/runtime-benchmark-curve1174 $(BENCHMARKS)

.PHONY: plot-runtime-benchmark-curve1174
plot-runtime-benchmark-curve1174: OUT_SUB_PATH = $(RUNTIME_CURVE1174_SUB_PATH)
plot-runtime-benchmark-curve1174: LOG_PATH = $(LOG_BASE_PATH)/$(OUT_SUB_PATH)
plot-runtime-benchmark-curve1174: clean run-runtime-benchmark-curve1174
	# Needs to be repeated to execute multiple times in same make call
	PUBLISH=$(PUBLISH) COLLECT_STATS=$(COLLECT_STATS) SETS=$(SETS) \
	REPS=$(REPS) LOGS_DIR=$(LOG_PATH) OUT_SUB_PATH=$(OUT_SUB_PATH) \
	$(SCRIPTS_DIR)/make_all_plots.sh

runtime-benchmark-curve1174: $(RUNTIME_CURVE1174_BENCHED_SRC) $(RUNTIME_CURVE1174_SRC)
	$(CC) -o $(BDIR)/$@ $^ $(CFLAGS) $(LIBS)


################################################################################
#						   		GMP Benchmarks								   #
################################################################################

GMP_SUB_PATH = gmp/$(LOG_SUBDIRS)

# Specify the C files constituting the test
_GMP_SRC	= benchmark_helpers.c gmp_benchmark.c
GMP_SRC		= $(patsubst %,$(SDIR)/%,$(_GMP_SRC))

.PHONY: prepare-logs-gmp-benchmark
prepare-logs-gmp-benchmark:
	mkdir -p $(LOG_PATH)

.PHONY: compile-gmp-benchmark
compile-gmp-benchmark: OUT_SUB_PATH = $(GMP_SUB_PATH)
compile-gmp-benchmark: LOG_PATH = $(LOG_BASE_PATH)/$(OUT_SUB_PATH)
compile-gmp-benchmark: LIBS = -lgmp
compile-gmp-benchmark: CFLAGS += -DLOG_PATH=\"$(LOG_PATH)\"
compile-gmp-benchmark: prepare-logs-gmp-benchmark gmp-benchmark

.PHONY: run-gmp-benchmark
run-gmp-benchmark: OUT_SUB_PATH = $(GMP_SUB_PATH)
run-gmp-benchmark: LOG_PATH = $(LOG_BASE_PATH)/$(OUT_SUB_PATH)
run-gmp-benchmark: compile-gmp-benchmark
	echo "${LOG_PATH}" > ${LATEST_LOG_PATH}
	./$(BDIR)/gmp-benchmark -1

.PHONY: plot-gmp-benchmark
plot-gmp-benchmark: OUT_SUB_PATH = $(GMP_SUB_PATH)
plot-gmp-benchmark: LOG_PATH = $(LOG_BASE_PATH)/$(OUT_SUB_PATH)
plot-gmp-benchmark: clean run-gmp-benchmark
	# Needs to be repeated to execute multiple times in same make call
	PUBLISH=$(PUBLISH) COLLECT_STATS=$(COLLECT_STATS) SETS=$(SETS) \
	REPS=$(REPS) LOGS_DIR=$(LOG_PATH) OUT_SUB_PATH=$(OUT_SUB_PATH) \
	$(SCRIPTS_DIR)/make_all_plots.sh

gmp-benchmark: $(GMP_SRC)
	$(CC) -o $(BDIR)/$@ $^ $(CFLAGS) $(LIBS)

################################################################################
#						   	Memcpy Benchmarks								   #
################################################################################

MEMCPY_SUB_PATH = memcpy/$(LOG_SUBDIRS)

# Specify the C files constituting the test
_MEMCPY_SRC	= benchmark_helpers.c memcpy_benchmark.c
MEMCPY_SRC	= $(patsubst %,$(SDIR)/%,$(_MEMCPY_SRC))

.PHONY: prepare-logs-memcpy-benchmark
prepare-logs-memcpy-benchmark:
	mkdir -p $(LOG_PATH)

.PHONY: compile-memcpy-benchmark
compile-memcpy-benchmark: OUT_SUB_PATH = $(MEMCPY_SUB_PATH)
compile-memcpy-benchmark: LOG_PATH = $(LOG_BASE_PATH)/$(OUT_SUB_PATH)
compile-memcpy-benchmark: CFLAGS += -DLOG_PATH=\"$(LOG_PATH)\"
compile-memcpy-benchmark: prepare-logs-memcpy-benchmark memcpy-benchmark

.PHONY: run-memcpy-benchmark
run-memcpy-benchmark: OUT_SUB_PATH = $(MEMCPY_SUB_PATH)
run-memcpy-benchmark: LOG_PATH = $(LOG_BASE_PATH)/$(OUT_SUB_PATH)
run-memcpy-benchmark: compile-memcpy-benchmark
	echo "${LOG_PATH}" > ${LATEST_LOG_PATH}
	./$(BDIR)/memcpy-benchmark -1

.PHONY: plot-memcpy-benchmark
plot-memcpy-benchmark: OUT_SUB_PATH = $(MEMCPY_SUB_PATH)
plot-memcpy-benchmark: LOG_PATH = $(LOG_BASE_PATH)/$(OUT_SUB_PATH)
plot-memcpy-benchmark: clean run-memcpy-benchmark
	# Needs to be repeated to execute multiple times in same make call
	PUBLISH=$(PUBLISH) COLLECT_STATS=$(COLLECT_STATS) SETS=$(SETS) \
	REPS=$(REPS) LOGS_DIR=$(LOG_PATH) OUT_SUB_PATH=$(OUT_SUB_PATH) \
	$(SCRIPTS_DIR)/make_all_plots.sh

memcpy-benchmark: $(MEMCPY_SRC)
	$(CC) -o $(BDIR)/$@ $^ $(CFLAGS) $(LIBS)


.PHONY: plot-comparison
ifeq ($(LOGS_DIRS),)
plot-comparison: LOGS_DIRS = $(RUNTIME_SUB_PATH);$(GMP_SUB_PATH)
plot-comparison: LOGS_NAMES = V$(VERSION);gmp
endif
plot-comparison:
	LOGS_DIRS="${LOGS_DIRS}" LOGS_NAMES="${LOGS_NAMES}" PUBLISH=$(PUBLISH) \
	COLLECT_STATS=$(COLLECT_STATS) SETS=$(SETS) REPS=$(REPS) \
	OUT_SUB_PATH=comparison/$(LOG_SUBDIRS) \
	$(SCRIPTS_DIR)/make_all_plots.sh

.PHONY: plots
plots: plot-gmp-benchmark plot-memcpy-benchmark plot-runtime-benchmark plot-comparison

.PHONY: clean
clean:
	rm -f *~ core $(INCDIR)/*~ $(BIN_FILES)
